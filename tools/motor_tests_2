#!/usr/bin/wish

# motor tests
# perform these tests on robot motors:

# Copyright 2003-2005 Interactive Motion Technologies, Inc.
# Cambridge, MA, USA
# http://www.interactive-motion.com
# All rights reserved

# test cables
# read encoders
# motor zero volts
# motor direction
# torque curve
# 80% max torque
# analog input
# digital output

package require Tk

global ob

set ob(crobhome) $::env(CROB_HOME)

source $ob(crobhome)/shm.tcl

# motor_test writes 6 items to log:

# ob->log[j++] = (f64) ob->i;
# ob->log[j++] = rob->ft.moment.z;
# ob->log[j++] = rob->shoulder.angle.rad;
# ob->log[j++] = rob->elbow.angle.rad;
# ob->log[j++] = ob->raw_torque_volts.s;
# ob->log[j++] = ob->raw_torque_volts.e;

set ob(tmpdir) "/tmp/motor_test[pid]"

proc testline {tag text {command none}} {
	global ob
	if {[string compare $command none]} {
		set b [button .b$tag -text $text -command test_$tag]
	} else {
		set b [label .b$tag -text $text]
	}
	set cb1 [checkbutton .cb1$tag -text "Motor 1"]
	set cb2 [checkbutton .cb2$tag -text "Motor 2"]
	set lp [label .lp$tag -text done.]
	#  Assign both to a row in the grid
	# grid $l $b $lp $cb -padx 4 -pady 4
	grid $b $cb1 $cb2 $lp -pady 4 -sticky w
	grid $b -sticky e
	foreach i {b cb1 cb2 lp} {
		set ob($i,$tag) [set $i]
	}
}

# tick for n seconds.
# when done, call donecmd

set ob(timestop) 0

proc ticktime {n {donecmd return}} {
    global ob
    if {$ob(timestop)} {
	set n 0
	set ob(timestop) 0
    }

    set ob(timestr) "Time: $n"
    incr n -1

    if {$n >= 0} {
	after 1000 ticktime $n $donecmd
    } else {
	$donecmd
    }
}

set ob(shmstop) 0

proc tickshm {} {
    global ob
    if {$ob(shmstop)} {
	return
    }

    set ob(anglestr1) "Motor 1 angle: [rshm etheta]"
    set ob(anglestr2) "Motor 2 angle: [rshm stheta]"
    set ob(vel1) [rshm ethetadot]
    set ob(vel2) [rshm sthetadot]
    set ob(velstr1) "Motor 1 vel: $ob(vel1)"
    set ob(velstr2) "Motor 2  vel: $ob(vel2)"
    set ob(ztorque) [rshm ft_zmoment]
    set ob(ztorquestr) "Z moment: $ob(ztorque)"
    set ob(ainval) [rshm adcvolts [expr {8 + $ob(ainchan)}]]
    set ob(ainvalstr) "AIn($ob(ainchan)) volts: $ob(ainval)"
    color_labels
    after 50 tickshm
}

proc color_labels {} {
    global ob

    if {$ob(vel1) < 0.0} {
	.thetadot1 configure -bg pink
    } else {
	.thetadot1 configure -bg #d9d9d9
    }

    if {$ob(vel2) < 0.0} {
	.thetadot2 configure -bg pink
    } else {
	.thetadot2 configure -bg #d9d9d9
    }

    if {$ob(ainval) < 0.0} {
	.fainval configure -bg pink
    } else {
	.fainval configure -bg #d9d9d9
    }

    if {$ob(ztorque) < 0.0} {
	.ztrq configure -bg pink
    } else {
	.ztrq configure -bg #d9d9d9
    }

}

proc check_run_motors {} {
    global ob

    reap_zombies

    if {!($ob(run,1) || $ob(run,2))} {
	status "Test stopped because neither motor was selected."
	error "Neither motor is selected."
    }
}

proc spin {motor volts} {
    global ob
    if {![string match {[12]} $motor]} {
	return
    }

    set volts [expr {volts * $ob(voltsmult)}]

    if {$ob(run,$motor)} {
	wshm raw_torque_volts_$ob(motor,$motor) $volts
    } else {
	wshm raw_torque_volts_$ob(motor,$motor) 0.0
    }
}

# ramp up to volts volts in 1 second.
proc ramp_up {motor volts} {
	foreach i {0 1 2 3 4 5} {
	    # ms wait
	    set wait [expr {$i * 200}]
	    set iv [expr {$volts * $i / 5.0}]
	    after $wait spin $motor $iv
	}
}

# ramp down from volts volts in 1 second.
proc ramp_down {motor volts} {
	foreach i {0 1 2 3 4 5} {
	    # ms wait
	    set wait [expr {$i * 200}]
	    set iv [expr {$volts * (5 - $i) / 5.0}]
	    after $wait spin $motor $iv
	}
}

proc make_window {} {
    global ob

    button .exit -text Exit -command exit_command -bg red
    button .stop -text Stop -command stop_command
    grid .exit .stop - -sticky w

    label .dummy1
    grid .dummy1

    set ob(run,1) 0
    set ob(run,2) 0
    checkbutton .motor1 -text "Motor 1" -variable ob(run,1)
    checkbutton .motor2 -text "Motor 2" -variable ob(run,2)
    label .molab -text "Motor Active"
    grid .molab .motor1 .motor2 -sticky w

    label .dummy15
    grid .dummy15

    frame .hr1 -bd 3 -height 3 -relief ridge
    grid .hr1 - -sticky we

    label .dummy2
    grid .dummy2

    label .lcables -text "Test Cables"
    checkbutton .cbcables -text "done."
    grid .lcables .cbcables -pady 4 -sticky w
    grid .lcables -sticky e

    testline read_encoders "Read Encoders" none

    testline motor_0v "Motor Zero Volts" test
    testline motor_dir "Motor Direction" test
    testline torque_curve "Torque Curve" test
    testline max_torque "80% Max Torque" test

    button .bain -text "Analog Input" -command test_ain
    checkbutton .cbain -text "done."
    grid .bain .cbain -pady 4 -sticky w
    grid .bain -sticky e

    label .ldout -text "Digital Output"
    checkbutton .cbdout -text "done."
    grid .ldout .cbdout -pady 4 -sticky w
    grid .ldout -sticky e

    # testline ain "Analog Input" test
    # testline dout "Digital Output" none

    label .dummy3
    grid .dummy3

    frame .hr2 -bd 3 -height 3 -relief ridge
    grid .hr2 - -sticky we

    label .dummy4
    grid .dummy4


    set ob(ainchan) 0
    frame .fain
    button .fain.minus -text "<<" \
	    -command {set ob(ainchan) [expr {($ob(ainchan) + 7) % 8}]}
    label .fain.chan -textvariable ob(ainchan)
    button .fain.plus -text ">>" \
	    -command {set ob(ainchan) [expr {($ob(ainchan) + 1) % 8}]}
    set ob(ainvalstr) "AIn($ob(ainchan)) volts: 0.000"
    label .fainval -textvariable ob(ainvalstr)
    pack .fain.minus .fain.chan .fain.plus -side left
    grid .fain .fainval -
    grid .fainval -sticky w

    checkbutton .dout0 -text dout0 -variable ob(dout0) -command test_dout
    checkbutton .dout1 -text dout1 -variable ob(dout1) -command test_dout
    grid  x .dout0 .dout1 - -sticky w

    set ob(anglestr1) "Motor 1 Angle: 0.000"
    label .theta1 -textvariable ob(anglestr1)
    set ob(anglestr2) "Motor 2 Angle: 0.000"
    label .theta2 -textvariable ob(anglestr2)
    grid .theta1 - .theta2 - -sticky w

    set ob(velstr1) "Motor 1 Vel: 0.000"
    label .thetadot1 -textvariable ob(velstr1)
    set ob(velstr) "Motor 2 Vel: 0.000"
    label .thetadot2 -textvariable ob(velstr2)
    grid .thetadot1 - .thetadot2 - -sticky w

    set ob(ztorquestr) "Z Moment: 0.000"
    label .ztrq -textvariable ob(ztorquestr)

    set ob(timestr) "Time: 0"
    label .time -textvariable ob(timestr)
    grid .ztrq - .time - -sticky w

    label .dummy5
    grid .dummy5

    label .status -text ""
    grid .status - - - - -

    wm geometry . 500x600
    wm minsize . 500 600
    wm title . "InMotion2 Component Tests"
    wm withdraw .

}

# brakes off, send zero volts to each motor,
# plot data
# make sure motors do not turn.
# also make sure there is no noise.
proc test_motor_0v {} {
    global ob
    set ob(procname) [procname]
    set sec 60
    check_run_motors
    status "[procname]: $sec seconds..."
    set ob(m0vlog) [file join $ob(tmpdir) motor_0v.dat]
    ticktime $sec done_motor_0v
    wshm logfnid 1
    start_log $ob(m0vlog) 6
    spin 1 0.0
    spin 2 0.0
}

proc motor_0v_p2p {} {
    global ob

    set ob(m0v,sang,min) 1000.0
    set ob(m0v,eang,min) 1000.0
    set ob(m0v,sang,max) -1000.0
    set ob(m0v,eang,max) -1000.0
    set fd [open "|$ob(crobhome)/ta.tcl  $ob(m0vlog)" r]

    while {[gets $fd line]} {
	foreach {i zmo sang eang storque etorque} $line break
        if {$eang > $ob(m0v,eang,max)} {set ob(m0v,eang,max) $eang}
        if {$eang < $ob(m0v,eang,min)} {set ob(m0v,eang,min) $eang}
	set ob(m0v,eang,noise) [expr {$ob(m0v,eang,max) - $ob(m0v,eang,min)}]

        if {$sang > $ob(m0v,sang,max)} {set ob(m0v,sang,max) $sang}
        if {$sang < $ob(m0v,sang,min)} {set ob(m0v,sang,min) $sang}
	set ob(m0v,sang,noise) [expr {$ob(m0v,sang,max) - $ob(m0v,sang,min)}]
    }
    puts "encoder peak to peak noise:"
    puts -nonewline "motor 1: min $ob(m0v,eang,min) max $ob(m0v,eang,max) peak to peak $ob(m0v,eang,noise)"
    if {$ob(m0v,eang,noise) > .002} {
	puts -nonewline " noisy" 
    } else {
	puts -nonewline " ok" 
    }
    puts ""
    puts -nonewline "motor 2: min $ob(m0v,sang,min) max $ob(m0v,sang,max) peak to peak $ob(m0v,sang,noise)"
    if {$ob(m0v,sang,noise) > .002} {
	puts -nonewline " noisy" 
    } else {
	puts -nonewline " ok" 
    }
    puts ""
    puts ""
    close $fd
}

proc done_motor_0v {} {
    global ob
    set ob(procname) [procname]
    status "[procname]: done."
    stop_log
    # elbow and shoulder angles
    plot_log $ob(m0vlog) "plot '%f' using 1:3, '%f' using 1:4"
    motor_0v_p2p
}

# brakes off,
# send -.5v and .5v
# check direction of motor rotation
proc test_motor_dir {} {
    global ob
    set ob(procname) [procname]
    check_run_motors
    status "$ob(procname): spinning with negative voltage (ccw)..."
    ticktime 10
    spin 1 -.5
    spin 2 -.5
    after 5000 {
	 status "$ob(procname): spinning with positive voltage (cw)..."
	 spin 1 .5
	 spin 2 .5
    }
    after 10000 {
	spin 1 0.0
	spin 2 0.0
	status "$ob(procname): done."
    }
}

# test_torque_curve helper fn send voltage
# n is an index into tcvoltslist
proc torque_curve_volts {n} {
	global ob

	# tcl here stands for torque curve list.
	if {$n >= $ob(tcllen)} {
		# we are done
		spin 1 0.0
		spin 2 0.0
		set running "motor:"
		if {$ob(run,1)} { set running "$running motor 1" }
		if {$ob(run,2)} { set running "$running motor 2" }

		# print results to tty and ~/torque.dat
		status "torque_curve done."
		set tcout [open "~/torque.dat" a]
		puts [clock format [clock seconds]]
		puts $tcout [clock format [clock seconds]]
		puts "Torque Curve: $running (written to ~/torque.dat)"
		puts $tcout "Torque Curve: $running"
		foreach v $ob(tcvoltslist) {
		    set v [expr {double($v)}]
		    puts "$v: $ob(torque,$v)"
		    puts $tcout "$v: $ob(torque,$v)"
		}
		puts ""
		puts $tcout ""
		close $tcout
		return
	}

	# not done, send a voltage
	set volts [expr {double([lindex $ob(tcvoltslist) $n])}]

	spin 1 $volts
	spin 2 $volts
	status "torque_curve ($n): $volts volts"

	# read after 2.5 secs
	after 2500 torque_curve_readz $n $volts
	# next iter after 5 secs
	incr n 
	after 5000 torque_curve_volts $n
}

# test_torque_curve helper fn read z
proc torque_curve_readz {n volts} {
	global ob
	set ob(torque,$volts) [rshm ft_zmoment]
	status "torque_curve ($n): $volts volts read z"
}

# send set of motor voltages
# get torque curve
proc test_torque_curve {} {
    global ob
    # a gentle order for the spin, start slowly.
    # will still kick going from 5v to 0v.
    check_run_motors
    set ob(tcvoltslist) {-1 -2 -3 -4 -5 0 1 2 3 4 5}
    set ob(tcllen) [llength $ob(tcvoltslist)]
    ticktime [expr {$ob(tcllen) * 5}]
    torque_curve_volts 0
}

# brakes off, send zero volts to each motor,
# plot data
# make sure motors do not turn.
# also make sure there is no noise.
proc test_max_torque {} {
    global ob
    set ob(procname) [procname]
    check_run_motors
    set ttime 60
    ticktime [expr {2 * $ttime + 5}]
    set ob(m80plog) [file join $ob(tmpdir) motor_0v.dat]
    wshm logfnid 1
    start_log $ob(m80plog) 6


    # later...
    # off after 30 sec
    # after 30000 {wshm nlog 0}
    # on after 4 min 30 sec
    # after 27000 {wshm nlog 6}

    status "[procname]: +4v for $ttime seconds"
    ramp_up 1 4.0
    ramp_up 2 4.0

    after [expr {$ttime * 1000}] {
	    status "$ob(procname): ramping down"
	    ramp_down 1 4.0
	    ramp_down 2 4.0
    }
    after [expr {($ttime + 5) * 1000}] {
	    status "$ob(procname): -4v for 60 seconds"
	    ramp_up 1 -4.0
	    ramp_up 2 -4.0
    }
    after [expr {(2 * $ttime + 5) * 1000}] {
	    ramp_down 1 -4.0
	    ramp_down 2 -4.0
	    status "$ob(procname): done"
	    stop_log
	    plot_log $ob(m80plog) "plot '%f' using 1:2"
    }
}

# read 16 ain channels
# plot data

proc test_ain {} {
    global ob
    set ob(procname) [procname]
    set sec 60
    ticktime $sec
    status "[procname]: $sec seconds..."

    set ob(ain,log) [file join $ob(tmpdir) ain.asc]
    file mkdir $ob(tmpdir)
    set ob(ain,out) [open $ob(ain,log) w]
    for {set j 0} {$j < 16} {incr j} {
	set ob(ain,min,$j) 1000.0
	set ob(ain,max,$j) -1000.0
    }
    set ob(ain,i) 0
    every 10 {
	global ob
	if {$ob(ain,i) >= 3000} {
	    after cancel $ob(ain_after_id)
	    done_ain
	    return
	}

	puts -nonewline $ob(ain,out) "$ob(ain,i) "
	for {set j 0} {$j < 16} {incr j} {
	    set val "[rshm adcvolts $j] "
	    if {$val < $ob(ain,min,$j)} {set ob(ain,min,$j) $val}
	    if {$val > $ob(ain,max,$j)} {set ob(ain,max,$j) $val}
	    puts -nonewline $ob(ain,out) $val
	}
	puts $ob(ain,out) ""
	incr ob(ain,i)

    } ob(ain_after_id)
}

proc done_ain {} {
    global ob
    set ob(procname) [procname]
    status "[procname]: done."
    close $ob(ain,out)
    puts "ain peak to peak noise:"
    for {set j 0} {$j < 16} {incr j} {
	set noise [expr {$ob(ain,max,$j) - $ob(ain,min,$j)}]
	puts -nonewline "$j: $noise"
	if {$noise > .04} {
	    puts -nonewline " noisy" 
	} else {
	    puts -nonewline " ok" 
	}
	puts ""
    }
    puts ""
    plot_log $ob(ain,log) "plot '%f' using 1:2 w l, \
    '%f' using 1:3 w l, \
    '%f' using 1:4 w l, \
    '%f' using 1:5 w l, \
    '%f' using 1:6 w l, \
    '%f' using 1:7 w l, \
    '%f' using 1:8 w l, \
    '%f' using 1:9 w l, \
    '%f' using 1:10 w l, \
    '%f' using 1:11 w l, \
    '%f' using 1:12 w l, \
    '%f' using 1:13 w l, \
    '%f' using 1:14 w l, \
    '%f' using 1:15 w l, \
    '%f' using 1:16 w l, \
    '%f' using 1:17 w l"
}

proc test_dout {} {
    global ob
    wshm dout0 $ob(dout0)
    wshm dout1 $ob(dout1)
}

set ob(rtl_loaded) 0

proc load_command {} {
    global ob
    if {$ob(rtl_loaded)} {
	error "lkm already loaded"
    }
    set ob(rtl_loaded) 1
    wm protocol . WM_DELETE_WINDOW exit_command
    start_lkm
    start_shm
    # no safety zone
    wshm safety_pos 10.0
    # write open loop voltages
    wshm test_raw_torque 1
    wshm have_thermal_model 0
    wshm logfnid 1
    wshm shoulder_torque_xform 1.0
    wshm elbow_torque_xform 1.0
    # no dio oversampling
    wshm diovs 1

    set ob(pfovolts) 0.
    set ob(voltsmult) 1.0
    set ob(pfovolts) [rshm pfomax]
    if {$ob(pfovolts) == 10.0} {set ob(voltsmult) 2.0}

    after 100
    start_loop
    after 100
    set ob(motor,1) e
    set ob(motor,2) s
    tickshm
}

proc exit_command {} {
    global ob
    status "Unloading InMotion2 Robot Linux Kernel Module..."
    update idle
    stop_command
    set ob(rtl_loaded) 0
    stop_rtl
    file delete -force $ob(tmpdir)
    exit
}

# clear all alarms,
# zero motor stuff
# then restart tickshm

proc stop_command {} {
    global ob

    reap_zombies
    spin 1 0.0
    spin 2 0.0
    set ob(timestop) 1
    stop_log
    cancel_afters
    set ob(timestr) "Time: 0"
    spin 1 0.0
    spin 2 0.0
    after 200 tickshm
    after 1500 {set ob(timestop) 0}
    status "Test stopped by Stop button."
}

proc status {text} {
	.status configure -text $text
}

make_window
load_command
wm deiconify .

